import logging
from datetime import datetime, timedelta
from .base_handlers import show_main_menu
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from config import CONFIG, ADMIN_IDS  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from .states import ADMIN_MESSAGE, SELECT_USER, AWAIT_MESSAGE_TEXT, BROADCAST_MESSAGE, FULL_NAME, MAIN_MENU, SELECT_MONTH_RANGE
from keyboards import create_main_menu_keyboard, create_admin_keyboard, create_month_selection_keyboard
import asyncio
from db import db
from admin import export_accounting_report

logger = logging.getLogger(__name__)

async def start_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return "AWAIT_ADMIN_MESSAGE"

async def handle_admin_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç—å
    if message_text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardMarkup(create_main_menu_keyboard(user.id), resize_keyboard=True)
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
    db.cursor.execute("SELECT full_name FROM users WHERE telegram_id = ?", (user.id,))
    user_data = db.cursor.fetchone()
    full_name = user_data[0] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_msg = (
        f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ {full_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üì± @{user.username if user.username else '–Ω–µ—Ç'}\n"
        f"üìù –¢–µ–∫—Å—Ç: {message_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    success = 0
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_msg)
            success += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success}/{len(ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
        reply_markup=ReplyKeyboardMarkup(create_main_menu_keyboard(user.id), resize_keyboard=True)
    )
    return ConversationHandler.END

# 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_personal_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=create_admin_keyboard()
            )
            return ADMIN_MESSAGE
        
        recipient = context.user_data.get('recipient')
        is_username = context.user_data.get('is_username')
        
        if is_username:
            db.cursor.execute(
                "SELECT telegram_id FROM users WHERE username = ?",
                (recipient,)
            )
        else:
            db.cursor.execute(
                "SELECT telegram_id FROM users WHERE telegram_id = ?",
                (recipient,)
            )
        
        user = db.cursor.fetchone()
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await context.bot.send_message(
            chat_id=user[0],
            text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}"
        )
        
        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {'@' + recipient if is_username else recipient}",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
    
# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=create_admin_keyboard()
            )
            return ADMIN_MESSAGE
        
        db.cursor.execute("SELECT telegram_id FROM users WHERE is_verified = TRUE")
        users = db.cursor.fetchall()
        
        success = 0
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user[0],
                    text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}"
                )
                success += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(users)}",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
    
# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def select_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text.strip()
        
        if user_input.lower() == "–æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=create_admin_keyboard()
            )
            return ADMIN_MESSAGE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if user_input.startswith('@'):
            context.user_data['recipient'] = user_input[1:]  # –£–±–∏—Ä–∞–µ–º @
            context.user_data['is_username'] = True
        else:
            try:
                context.user_data['recipient'] = int(user_input)
                context.user_data['is_username'] = False
            except ValueError:
                raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username")
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'):",
            reply_markup=ReplyKeyboardRemove()
        )
        return AWAIT_MESSAGE_TEXT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return SELECT_USER
    
async def handle_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è)
        if user_input.lower() == "–æ—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=create_admin_keyboard()
            )
            return ADMIN_MESSAGE
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        recipient = context.user_data.get('message_recipient')
        is_username = context.user_data.get('is_username')
        
        if not recipient:
            raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_username:
            db.cursor.execute(
                "SELECT telegram_id, username FROM users WHERE username = ?",
                (recipient,)
            )
        else:
            db.cursor.execute(
                "SELECT telegram_id, username FROM users WHERE telegram_id = ?",
                (recipient,)
            )
        
        user_data = db.cursor.fetchone()
        if not user_data:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=user_data[0],
            text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}"
        )
        
        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {'@' + user_data[1] if user_data[1] else user_data[0]}",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
    
# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    user = update.effective_user
    
    if text == "–Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return SELECT_USER
    
    elif text == "—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return BROADCAST_MESSAGE
    
    elif text == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE
    
    elif text in ["üìä –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", "–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å"]:
        await export_accounting_report(update, context)
        return ADMIN_MESSAGE
    
    elif text in ["üìÖ –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", "–æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"]:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=create_month_selection_keyboard()
        )
        return SELECT_MONTH_RANGE
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
        reply_markup=create_admin_keyboard()
    )
    return ADMIN_MESSAGE

# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await start_admin_message(update, context)