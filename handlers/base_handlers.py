import logging
import asyncio
from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, ContextTypes
from .states import PHONE, MAIN_MENU, SELECT_MONTH_RANGE, FULL_NAME
from db import db
from config import CONFIG, ADMIN_IDS
from keyboards import create_main_menu_keyboard
from utils import check_registration, handle_unregistered
from .menu_handlers import show_today_menu, show_week_menu, view_orders, monthly_stats
from datetime import datetime, timedelta
from .common import show_main_menu
from .report_handlers import select_month_range
from admin import export_accounting_report

logger = logging.getLogger(__name__)

__all__ = ['start', 'error_handler', 'test_connection', 'main_menu', 'handle_text_message']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
    user = update.effective_user
    context.user_data['restored'] = True
    
    try:
        context.user_data['is_initialized'] = True
        db.cursor.execute("SELECT is_verified FROM users WHERE telegram_id = ?", (user.id,))
        user_data = db.cursor.fetchone()

        if not user_data:
            keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=reply_markup
            )
            return PHONE
        elif not user_data[0]:
            db.cursor.execute("DELETE FROM users WHERE telegram_id = ?", (user.id,))
            db.conn.commit()
            keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=reply_markup
            )
            return PHONE
        else:
            return await show_main_menu(update, user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await show_main_menu(update, user.id)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    error = str(context.error)
    logger.error(f"–û—à–∏–±–∫–∞: {error}", exc_info=context.error)
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{error}\n\n"
                     f"Update: {update if update else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    if update and isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def test_connection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        bot_info = await context.bot.get_me()
        test_msg = await update.message.reply_text(
            f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            f"ü§ñ –ë–æ—Ç: @{bot_info.username}\n"
            f"üÜî ID: {bot_info.id}\n"
            f"üìù –ò–º—è: {bot_info.first_name}"
        )
        await asyncio.sleep(5)
        await msg.delete()
        await test_msg.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n{str(e)}\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "2. –¢–æ–∫–µ–Ω –±–æ—Ç–∞\n"
            "3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç {user.id}")
    
    try:
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if text == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
            unverified_name = context.user_data.get('unverified_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            message = (
                f"‚ö†Ô∏è –ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç:\n"
                f"üë§ –ò–º—è: {unverified_name}\n"
                f"üÜî ID: {user.id}\n"
                f"üì± Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
                f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
            )
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(chat_id=admin_id, text=message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=ReplyKeyboardMarkup([["–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"]], resize_keyboard=True)
            )
            return FULL_NAME

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if not await check_registration(update, context):
            return await handle_unregistered(update, context)

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text in ["üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç", "üì¶ –û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"]:
            context.user_data['report_type'] = 'accounting' if text.startswith('üí∞') else 'provider'
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                    ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ], resize_keyboard=True)
            )
            return SELECT_MONTH_RANGE
        
        if text in ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"] and context.user_data.get('report_type'):
            return await select_month_range(update, context)
        
        # 4. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        return await main_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return await show_main_menu(update, user.id)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{update.message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    try:
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not await check_registration(update, context):
            return await handle_unregistered(update, context)

        from keyboards import create_main_menu_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        if text == "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
            return await show_today_menu(update, context)
        
        elif text == "–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é":
            return await show_week_menu(update, context)
        
        elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã":
            return await view_orders(update, context)
        
        elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü":
            return await monthly_stats(update, context)
        
        # elif text == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
            # return await start_admin_message(update, context)
        
        elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await show_main_menu(update, user.id)
        
        elif text == "–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é":
            await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
            return await show_main_menu(update, user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        elif text == "üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç":
            if user.id in CONFIG['accounting_ids']:
                context.user_data['report_type'] = 'accounting'
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω report_type: accounting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=ReplyKeyboardMarkup([
                        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
                        ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ], resize_keyboard=True)
                )
                return SELECT_MONTH_RANGE
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤")
                return await show_main_menu(update, user.id)

        elif text == "üì¶ –û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞":
            if user.id in CONFIG['provider_ids']:
                context.user_data['report_type'] = 'provider'
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω report_type: provider –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=ReplyKeyboardMarkup([
                        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
                        ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ], resize_keyboard=True)
                )
                return SELECT_MONTH_RANGE
            else:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                return await show_main_menu(update, user.id)

        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        elif text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
            if user.id in CONFIG['admin_ids']:
                context.user_data['report_type'] = 'admin'
                await export_accounting_report(update, context)
                return await show_main_menu(update, user.id)
            else:
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                return await show_main_menu(update, user.id)

        elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
            if user.id in CONFIG['admin_ids']:
                context.user_data['report_type'] = 'admin'
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=ReplyKeyboardMarkup([
                        ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"],
                        ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                        ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                    ], resize_keyboard=True)
                )
                return SELECT_MONTH_RANGE
            else:
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                return await show_main_menu(update, user.id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return await show_main_menu(update, user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}", exc_info=True)
        from keyboards import create_main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç –≤ –±–ª–æ–∫–µ except
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu_keyboard(user.id)
        )
    
async def handle_registered_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    db.cursor.execute("SELECT is_verified FROM users WHERE telegram_id = ?", (user.id,))
    result = db.cursor.fetchone()
    
    if not result or not result[0]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    if text == "üí∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç":
        if user.id in CONFIG['accounting_ids']:
            context.user_data['report_type'] = 'accounting'
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                    ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ], resize_keyboard=True)
            )
            return SELECT_MONTH_RANGE
    
    elif text == "üì¶ –û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞":
        if user.id in CONFIG['provider_ids']:
            context.user_data['report_type'] = 'provider'
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                    ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                ], resize_keyboard=True)
            )
            return SELECT_MONTH_RANGE
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ main_menu
    return await main_menu(update, context)
