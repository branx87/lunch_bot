import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from datetime import datetime, timedelta
from config import CONFIG, LOCATIONS, TIMEZONE, MENU, ADMIN_IDS
from db import db
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from .states import MAIN_MENU
from .common import show_main_menu
from utils import can_modify_order, is_order_cancelled
from utils import format_menu
import sqlite3
from .menu_handlers import view_orders

logger = logging.getLogger(__name__)

async def handle_order_callback(query, now, user, context):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞—Ç"""
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback
        _, day_offset_str = query.data.split("_", 1)
        day_offset = int(day_offset_str)
        target_date = (now + timedelta(days=day_offset)).date()
        
        # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 1: –ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è
        if target_date.weekday() >= 5:  # 5-6 = —Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            await query.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è", show_alert=True)
            return

        # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–µ–¥–∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
        if day_offset > 0 and target_date <= now.date():
            await query.answer("‚ùå –ü—Ä–µ–¥–∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã", show_alert=True)
            return

        # –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 3: –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ 9:30
        if day_offset == 0:
            if now.time() >= time(9, 30):
                await query.answer("‚ÑπÔ∏è –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à—ë–Ω –≤ 9:30", show_alert=True)
                return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_record = db.cursor.fetchone()
        if not user_record:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user_db_id = user_record[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? 
              AND target_date = ?
              AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        existing_order = db.cursor.fetchone()

        if existing_order:
            await query.answer(f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–∫–∞–∑–∞–Ω–æ {existing_order[0]} –ø–æ—Ä—Ü–∏–π", show_alert=True)
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        with db.conn:
            db.cursor.execute("""
                INSERT INTO orders (
                    user_id,
                    target_date,
                    order_time,
                    quantity,
                    is_preliminary,
                    created_at
                ) VALUES (?, ?, ?, ?, ?, ?)
            """, (
                user_db_id,
                target_date.isoformat(),
                now.strftime("%H:%M:%S"),  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
                day_offset > 0,  # –≠—Ç–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑?
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞-–≤—Ä–µ–º—è
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await refresh_day_view(query, day_offset, user_db_id, now, is_order=True)
        await query.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def handle_change_callback(query, now, user, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ–Ω—é"""
    try:
        _, day_offset_str = query.data.split("_", 1)
        day_offset = int(day_offset_str)
        target_date = (now + timedelta(days=day_offset)).date()
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        day_name = days_ru[target_date.weekday()]
        menu = MENU.get(day_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            return await refresh_day_view(query, day_offset, context.user_data['user_db_id'], now)

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_db_id = db.cursor.fetchone()[0]
        context.user_data['user_db_id'] = user_db_id
        context.user_data['current_day_offset'] = day_offset

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        current_qty = db.cursor.fetchone()[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        menu_text = (
            f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({target_date.strftime('%d.%m')}):\n"
            f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
            f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
            f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}\n\n"
            f"üõí –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑: {current_qty} –ø–æ—Ä—Ü–∏–∏"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å", callback_data=f"dec_{day_offset}"),
                InlineKeyboardButton("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å", callback_data=f"inc_{day_offset}")
            ],
            [InlineKeyboardButton("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{day_offset}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_{day_offset}")]
        ]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=menu_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_change_callback: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", show_alert=True)
        
async def handle_quantity_change(query, now, user, context):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–∞–∫—Å–∏–º—É–º–∞"""
    try:
        action, day_offset_str = query.data.split("_", 1)
        day_offset = int(day_offset_str)
        target_date = (now + timedelta(days=day_offset)).date()
        max_portions = 3  # –í–∞—à–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        db.cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user.id,))
        user_record = db.cursor.fetchone()
        if not user_record:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user_db_id = user_record[0]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤–∞—à –∫–æ–¥)
        db.cursor.execute("""
            SELECT quantity 
            FROM orders 
            WHERE user_id = ?
              AND target_date = ?
              AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        result = db.cursor.fetchone()
        if not result:
            await query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        current_quantity = result[0]

        # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        if action == "increase":
            if current_quantity >= max_portions:
                await query.answer("‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (3) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ", show_alert=True)
                return
            new_quantity = current_quantity + 1
            feedback = f"‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {new_quantity} –ø–æ—Ä—Ü–∏–π"
            
        elif action == "decrease":
            if current_quantity <= 1:
                # –í–∞—à –∫–æ–¥ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
                with db.conn:
                    db.cursor.execute("""
                        UPDATE orders
                        SET is_cancelled = TRUE,
                            order_time = ?
                        WHERE user_id = ?
                          AND target_date = ?
                          AND is_cancelled = FALSE
                    """, (now.strftime("%H:%M:%S"), user_db_id, target_date.isoformat()))
                
                days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                day_name = days_ru[target_date.weekday()]
                
                await query.edit_message_text(
                    text=f"‚ùå –ó–∞–∫–∞–∑ –Ω–∞ {day_name} –æ—Ç–º–µ–Ω—ë–Ω",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{day_offset}")]
                    ])
                )
                await query.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
                return
                
            new_quantity = current_quantity - 1
            feedback = f"‚úÖ –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {new_quantity} –ø–æ—Ä—Ü–∏–π"
            
        else:
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤–∞—à –∫–æ–¥)
        with db.conn:
            db.cursor.execute("""
                UPDATE orders
                SET quantity = ?,
                    order_time = ?
                WHERE user_id = ?
                  AND target_date = ?
                  AND is_cancelled = FALSE
            """, (new_quantity, now.strftime("%H:%M:%S"), user_db_id, target_date.isoformat()))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º refresh_day_view –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await refresh_day_view(query, day_offset, user_db_id, now)
        await query.answer(feedback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ({action}): {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

# --- Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ ---
async def handle_cancel_callback(query, now, user, context):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö
        if not query.data or '_' not in query.data:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        _, date_part = query.data.split("_", 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞
        if '-' in date_part:  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            try:
                if len(date_part.split('-')) != 3:
                    raise ValueError
                    
                target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
                day_offset = (target_date - now.date()).days
            except ValueError:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ callback: {date_part}")
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ")
                return
                
        elif date_part.isdigit():  # –°–º–µ—â–µ–Ω–∏–µ –¥–Ω–µ–π
            day_offset = int(date_part)
            target_date = (now + timedelta(days=day_offset)).date()
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {query.data}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–∫–∞–∑
        if not can_modify_order(target_date):
            await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ 9:30", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        db.cursor.execute(
            "SELECT id FROM users WHERE telegram_id = ? AND is_verified = TRUE",
            (user.id,)
        )
        user_record = db.cursor.fetchone()
        
        if not user_record:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        user_db_id = user_record[0]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with db.conn:
            db.cursor.execute("""
                UPDATE orders
                SET is_cancelled = TRUE,
                    order_time = ?
                WHERE user_id = ?
                  AND target_date = ?
                  AND is_cancelled = FALSE
                RETURNING id
            """, (now.strftime("%H:%M:%S"), user_db_id, target_date.isoformat()))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω
            if not db.cursor.fetchone():
                await query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ {target_date}"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try:
            await refresh_day_view(query, day_offset, user_db_id, now)
            await query.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            await query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_cancel_callback: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

async def refresh_orders_view(query, context, user_id, now, days_ru):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        db.cursor.execute("""
            SELECT o.target_date, o.quantity, o.is_preliminary
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE u.telegram_id = ?
              AND o.is_cancelled = FALSE
              AND o.target_date >= ?
            ORDER BY o.target_date
        """, (user_id, now.date().isoformat()))

        active_orders = db.cursor.fetchall()

        if not active_orders:
            await query.edit_message_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return await show_main_menu(query.message, user_id)

        response = "üì¶ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
        keyboard = []

        for order in active_orders:
            target_date = datetime.strptime(order[0], "%Y-%m-%d").date()
            day_name = days_ru[target_date.weekday()]
            date_str = target_date.strftime('%d.%m')
            qty = order[1]
            status = " (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π)" if order[2] else ""

            response += f"üìÖ {day_name} ({date_str}) - {qty} –ø–æ—Ä—Ü–∏–π{status}\n"
            keyboard.append([
                InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {date_str}", callback_data=f"change_{target_date.strftime('%Y-%m-%d')}"),
                InlineKeyboardButton(f"‚úï –û—Ç–º–µ–Ω–∏—Ç—å {date_str}", callback_data=f"cancel_{target_date.strftime('%Y-%m-%d')}")
            ])

        keyboard.append([InlineKeyboardButton("‚úî –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])

        await query.edit_message_text(
            response,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")

async def refresh_day_view(query, day_offset, user_db_id, now, is_order=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–Ω—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ"""
    try:
        days_ru = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        target_date = (now + timedelta(days=day_offset)).date()
        day_name = days_ru[target_date.weekday()]
        date_str = target_date.strftime("%d.%m")
        menu = MENU.get(day_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if not menu:
            response_text = f"üìÖ {day_name} ({date_str}) - –≤—ã—Ö–æ–¥–Ω–æ–π! –ú–µ–Ω—é –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ."
        else:
            response_text = (
                f"üçΩ –ú–µ–Ω—é –Ω–∞ {day_name} ({date_str}):\n"
                f"1. üç≤ –ü–µ—Ä–≤–æ–µ: {menu['first']}\n"
                f"2. üçõ –û—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: {menu['main']}\n"
                f"3. ü•ó –°–∞–ª–∞—Ç: {menu['salad']}"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.cursor.execute("""
            SELECT quantity, is_preliminary 
            FROM orders 
            WHERE user_id = ? 
              AND target_date = ?
              AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        order = db.cursor.fetchone()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = []
        if order:
            qty, is_preliminary = order
            order_type = "–ü—Ä–µ–¥–∑–∞–∫–∞–∑" if is_preliminary else "–ó–∞–∫–∞–∑"
            response_text += f"\n\n‚úÖ {order_type}: {qty} –ø–æ—Ä—Ü–∏–∏"
            
            if can_modify_order(target_date):
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_{day_offset}")])
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{day_offset}")])
            else:
                response_text += "\n‚è≥ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)"
        elif can_modify_order(target_date):
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{day_offset}")])
        else:
            response_text += "\n‚è≥ –ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=response_text,
            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω—è: {e}", exc_info=True)
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)

async def modify_portion_count(query, now, user, context, delta):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π"""
    try:
        day_offset = context.user_data['current_day_offset']
        target_date = (now + timedelta(days=day_offset)).date()
        user_db_id = context.user_data['user_db_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        db.cursor.execute("""
            SELECT quantity FROM orders 
            WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
        """, (user_db_id, target_date.isoformat()))
        current_qty = db.cursor.fetchone()[0]
        new_qty = current_qty + delta

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if new_qty < 1:
            return await handle_cancel_callback(query, now, user, context)
        if new_qty > 3:
            await query.answer("‚ÑπÔ∏è –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Ä—Ü–∏–∏")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        with db.conn:
            db.cursor.execute("""
                UPDATE orders SET quantity = ? 
                WHERE user_id = ? AND target_date = ? AND is_cancelled = FALSE
            """, (new_qty, user_db_id, target_date.isoformat()))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        await handle_change_callback(query, now, user, context)
        await query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_qty} –ø–æ—Ä—Ü–∏–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", show_alert=True)

async def handle_confirm_callback(query, now, user, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        day_offset = context.user_data['current_day_offset']
        await refresh_day_view(query, day_offset, context.user_data['user_db_id'], now)
        await query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    now = datetime.now(TIMEZONE)
    user = update.effective_user
    
    try:
        if query.data.startswith("inc_"):
            await modify_portion_count(query, now, user, context, +1)
        elif query.data.startswith("dec_"):
            await modify_portion_count(query, now, user, context, -1)
        elif query.data.startswith("change_"):
            await handle_change_callback(query, now, user, context)
        elif query.data.startswith("cancel_"):
            await handle_cancel_callback(query, now, user, context)
        elif query.data.startswith("confirm_"):
            await handle_confirm_callback(query, now, user, context)
        elif query.data.startswith("order_"):
            await handle_order_callback(query, now, user, context)
        elif query.data == "back_to_menu":
            await show_main_menu(query.message, user.id)
        elif query.data == "noop":
            await query.answer()  # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        elif query.data == "refresh":
            pass  # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}", exc_info=True)
        try:
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        except Exception as inner_e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {inner_e}")
    
async def handle_cancel_order(query, target_date_str):
    if not can_modify_order(target_date_str):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–ê–®–£ –ø—Ä–æ–≤–µ—Ä–∫—É
        await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Å–ª–µ 9:30", show_alert=True)
        return
    
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ"""
    user_id = query.from_user.id
    target_date = datetime.strptime(target_date_str, "%Y-%m-%d").date()
    now = datetime.now(TIMEZONE)
    
    if not can_modify_order(target_date):
        await query.answer("‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ (–ø–æ—Å–ª–µ 9:30)", show_alert=True)
        return False

    db.cursor.execute(
        "DELETE FROM orders WHERE user_id = "
        "(SELECT id FROM users WHERE telegram_id = ?) AND target_date = ?",
        (user_id, target_date_str)
    )
    db.conn.commit()
    
    return db.cursor.rowcount > 0
    
async def handle_back_callback(query, now, user, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    try:
        _, day_offset_str = query.data.split("_", 1)
        day_offset = int(day_offset_str)
        await refresh_day_view(query, day_offset, context.user_data['user_db_id'], now)
        await query.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_callback: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)
