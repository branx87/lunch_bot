import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler
from config import CONFIG
from keyboards import create_admin_keyboard, create_month_selection_keyboard
from admin import export_accounting_report
from .constants import (
    AWAIT_MESSAGE_TEXT,
    PHONE, FULL_NAME, 
    LOCATION, MAIN_MENU, 
    ORDER_ACTION, 
    ORDER_CONFIRMATION, 
    SELECT_MONTH_RANGE,
    BROADCAST_MESSAGE, 
    ADMIN_MESSAGE, 
    AWAIT_USER_SELECTION, 
    SELECT_MONTH_RANGE_STATS
)
from db import db
import asyncio

logger = logging.getLogger(__name__)

async def handle_admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text.strip().lower()
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in CONFIG.get('admin_ids', []) and user.id not in CONFIG.get('accounting_ids', []):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END  # –ó–∞–º–µ–Ω–∏–ª–∏ ADMIN_MESSAGE –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

    if text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return BROADCAST_MESSAGE

    elif text == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=create_admin_keyboard()
        )
        return ConversationHandler.END  # –ó–∞–º–µ–Ω–∏–ª–∏ ADMIN_MESSAGE

    elif text in ["üìä –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å", "–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å"]:
        if user.id in CONFIG.get('admin_ids', []) or user.id in CONFIG.get('accounting_ids', []):
            await export_accounting_report(update, context)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤")
        return ConversationHandler.END  # –ó–∞–º–µ–Ω–∏–ª–∏ ADMIN_MESSAGE

    elif text in ["üìÖ –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", "–æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"]:
        if user.id in CONFIG.get('admin_ids', []) or user.id in CONFIG.get('accounting_ids', []):
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=create_month_selection_keyboard()
            )
            return SELECT_MONTH_RANGE
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤")
        return ConversationHandler.END  # –ó–∞–º–µ–Ω–∏–ª–∏ ADMIN_MESSAGE

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_admin_keyboard()
    )
    return ConversationHandler.END  # –ó–∞–º–µ–Ω–∏–ª–∏ ADMIN_MESSAGE