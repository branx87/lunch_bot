# report_handlers.py
import logging
from datetime import date, datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from config import CONFIG, TIMEZONE
from keyboards import create_main_menu_keyboard
from .constants import (
    AWAIT_MESSAGE_TEXT,
    PHONE, FULL_NAME,
    LOCATION, MAIN_MENU,
    ORDER_ACTION,
    ORDER_CONFIRMATION,
    SELECT_MONTH_RANGE,
    BROADCAST_MESSAGE,
    ADMIN_MESSAGE,
    AWAIT_USER_SELECTION,
    SELECT_MONTH_RANGE_STATS
)

logger = logging.getLogger(__name__)

async def handle_report_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    from admin import export_orders_for_provider, export_accounting_report, export_monthly_report
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
        today = datetime.now(TIMEZONE).date()
        await generate_report(update, context, user_id, today, today)
    elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=ReplyKeyboardMarkup([
                ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
        )
        return SELECT_MONTH_RANGE

async def select_month_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    from admin import export_orders_for_provider, export_accounting_report, export_monthly_report
    try:
        user_id = update.effective_user.id
        text = update.message.text
        
        if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            from .common import show_main_menu
            return await show_main_menu(update, user_id)

        now = datetime.now(TIMEZONE)
        if text == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            start_date = now.replace(day=1).date()
            end_date = now.date()
        elif text == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
            first_day = now.replace(day=1)
            last_day_prev_month = first_day - timedelta(days=1)
            start_date = last_day_prev_month.replace(day=1).date()
            end_date = last_day_prev_month.date()
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥")
            return SELECT_MONTH_RANGE

        await generate_report(update, context, user_id, start_date, end_date)
        from .common import show_main_menu
        return await show_main_menu(update, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        from .common import show_main_menu
        return await show_main_menu(update, user_id)

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                         user_id: int, start_date: date, end_date: date):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    from admin import export_orders_for_provider, export_accounting_report, export_monthly_report
    try:
        if user_id in CONFIG.get('admin_ids', []):
            await export_monthly_report(update, context, start_date, end_date)
        elif user_id in CONFIG.get('accounting_ids', []):
            await export_accounting_report(update, context, start_date, end_date)
        elif user_id in CONFIG.get('provider_ids', []):
            await export_orders_for_provider(update, context, start_date, end_date)
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞")