import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from .common import show_main_menu
from .states import SELECT_MONTH_RANGE
from .base_handlers import show_main_menu
from admin import export_orders_for_provider, export_accounting_report
from config import TIMEZONE, CONFIG
from keyboards import create_main_menu_keyboard

logger = logging.getLogger(__name__)

async def handle_admin_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å":
        await export_accounting_report(update, context)  # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    elif text == "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=ReplyKeyboardMarkup([
                ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"],
                ["–û—Ç–º–µ–Ω–∞"]
            ], resize_keyboard=True)
        )
        return SELECT_MONTH_RANGE

async def select_month_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        text = update.message.text
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –Ω–∞—á–∞–ª–µ
        if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return await show_main_menu(update, user_id)

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –≤–º–µ—Å—Ç–æ user.id
        logger.info(f"User ID: {user_id}")
        logger.info(f"Admin IDs: {CONFIG['admin_ids']}")
        logger.info(f"Provider IDs: {CONFIG['provider_ids']}")
        logger.info(f"Accounting IDs: {CONFIG['accounting_ids']}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞: {text}, report_type: {context.user_data.get('report_type')}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
        reply_markup = ReplyKeyboardMarkup(
            [["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"], 
             ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            resize_keyboard=True
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        if text not in ["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                reply_markup=reply_markup
            )
            return SELECT_MONTH_RANGE

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        report_type = context.user_data.get('report_type')
        if not report_type:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                reply_markup=ReplyKeyboardRemove()
            )
            return await show_main_menu(update, user_id)

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {text}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
        now = datetime.now(TIMEZONE)
        if text == "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            start_date = now.replace(day=1).date()
            end_date = now.date()
        elif text == "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü":
            first_day = now.replace(day=1)
            last_day_prev_month = first_day - timedelta(days=1)
            start_date = last_day_prev_month.replace(day=1).date()
            end_date = last_day_prev_month.date()
        else:
            # –≠—Ç–æ—Ç else —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º –∏–∑-–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return await show_main_menu(update, user_id)

        logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ {report_type} –∑–∞ {start_date} - {end_date}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        try:
            if report_type == 'provider':
                await export_orders_for_provider(update, context, start_date, end_date)
            else:
                await export_accounting_report(update, context, start_date, end_date)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
                reply_markup=ReplyKeyboardMarkup(
                    create_main_menu_keyboard(user_id),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id
                    resize_keyboard=True
                )
            )
            return await show_main_menu(update, user_id)  # –î–æ–±–∞–≤–ª–µ–Ω return

        return await show_main_menu(update, user_id)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ select_month_range: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")
        return await show_main_menu(update, user_id)