import openpyxl
from datetime import datetime, date, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from config import CONFIG, TIMEZONE, LOCATIONS  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LOCATIONS –∏–∑ config
from db import db
import logging
from keyboards import create_main_menu_keyboard
from openpyxl.styles import Font
import sqlite3
from handlers.constants import (
    AWAIT_MESSAGE_TEXT,
    PHONE, FULL_NAME,
    LOCATION, MAIN_MENU,
    ORDER_ACTION,
    ORDER_CONFIRMATION,
    SELECT_MONTH_RANGE,
    BROADCAST_MESSAGE,
    ADMIN_MESSAGE,
    AWAIT_USER_SELECTION,
    SELECT_MONTH_RANGE_STATS
)
from handlers.common import show_main_menu
from typing import Optional, Union, List, Dict, Any, Tuple, Callable
import os
from openpyxl import Workbook
from openpyxl.styles import Font

SELECT_MONTH_RANGE = "SELECT_MONTH_RANGE"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

def ensure_reports_dir(report_type: str = 'accounting') -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–π"""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    if report_type == 'provider':
        reports_dir = os.path.join(base_dir, 'reports', 'provider_reports')
    elif report_type == 'admin':
        reports_dir = os.path.join(base_dir, 'reports', 'admin_reports')
    else:
        reports_dir = os.path.join(base_dir, 'reports', 'accounting_reports')
    
    os.makedirs(reports_dir, exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    report_files = sorted(
        [f for f in os.listdir(reports_dir) if f.endswith('.xlsx')],
        key=lambda x: os.path.getmtime(os.path.join(reports_dir, x)),
        reverse=True
    )
    for old_file in report_files[5:]:
        try:
            os.remove(os.path.join(reports_dir, old_file))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞ {old_file}: {e}")
    
    return reports_dir

async def export_orders_for_provider(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å –æ—Ç—á—ë—Ç–æ–º –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –∏ –æ–±—ä–µ–∫—Ç–∞–º.
    –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    """
    try:
        user = update.effective_user
        reports_dir = ensure_reports_dir('provider')

        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if not start_date or not end_date:
            today = datetime.now(TIMEZONE).date()
            start_date = end_date = today
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        wb = openpyxl.Workbook()

        # 1. –õ–∏—Å—Ç "–ó–∞–∫–∞–∑—ã"
        ws_orders = wb.active
        ws_orders.title = "–ó–∞–∫–∞–∑—ã"
        orders_headers = ["–î–∞—Ç–∞", "–õ–æ–∫–∞—Ü–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π"]
        ws_orders.append(orders_headers)
        ws_orders.auto_filter.ref = "A1:C1"

        total_portions = 0

        # SQL-–∑–∞–ø—Ä–æ—Å: –∑–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º –∏ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT 
                o.target_date,
                u.location,
                SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY o.target_date, u.location
            ORDER BY o.target_date, u.location
        ''', (start_date.isoformat(), end_date.isoformat()))

        for row in db.cursor.fetchall():
            formatted_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
            ws_orders.append([formatted_date, row[1], row[2]])
            total_portions += row[2]

        # 2. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"
        ws_summary = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
        summary_headers = ["–û–±—ä–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π"]
        ws_summary.append(summary_headers)
        ws_summary.auto_filter.ref = "A1:B1"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.location
        ''', (start_date.isoformat(), end_date.isoformat()))

        location_data = dict(db.cursor.fetchall())

        for loc in sorted(LOCATIONS):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º LOCATIONS –∏–∑ config
            portions = location_data.get(loc, 0)
            ws_summary.append([loc, portions])

        # 3. –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_stats = wb.create_sheet("–ò—Ç–æ–≥–∏")
        stats_headers = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
        ws_stats.append(stats_headers)

        # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
        db.cursor.execute('''
            SELECT DISTINCT u.location
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
        ''', (start_date.isoformat(), end_date.isoformat()))
        unique_locations = [row[0] for row in db.cursor.fetchall() if row[0] in LOCATIONS]
        locations_count = len(unique_locations)

        stats_data = [
            ["–ü–µ—Ä–∏–æ–¥", f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"],
            ["–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π", total_portions],
            ["–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π", locations_count],
            ["–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")]
        ]
        for row in stats_data:
            ws_stats.append(row)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            for column in sheet.columns:
                max_length = max((len(str(cell.value)) if cell.value else 0 for cell in column), default=0)
                adjusted_width = (max_length + 2) * 1.2
                sheet.column_dimensions[column[0].column_letter].width = adjusted_width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = datetime.now(TIMEZONE).strftime("%Y%m%d_%H%M%S")
        file_name = f"provider_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        caption = (
            f"üçΩ –ó–∞–∫–∞–∑—ã –Ω–∞ {start_date.strftime('%d.%m.%Y')}"
            f"{f' ‚Äî {end_date.strftime('%d.%m.%Y')}' if start_date != end_date else ''}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏–π: {locations_count} | üçõ –í—Å–µ–≥–æ: {total_portions} –ø–æ—Ä—Ü–∏–π\n"
            "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        raise

async def export_accounting_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏"""
    try:
        reports_dir = ensure_reports_dir('accounting')
        now = datetime.now(TIMEZONE)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if not start_date or not end_date:
            start_date = end_date = now.date()
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        if start_date > end_date:
            start_date, end_date = end_date, start_date

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        
        # 1. –õ–∏—Å—Ç "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
        ws_detailed = wb.active
        ws_detailed.title = "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
        detailed_headers = ["–§–ò–û", "–û–±—ä–µ–∫—Ç", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¢–∏–ø –∑–∞–∫–∞–∑–∞"]
        ws_detailed.append(detailed_headers)
        ws_detailed.auto_filter.ref = "A1:G1"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
        query = '''
            SELECT 
                u.full_name,
                u.location,
                date(o.created_at) as order_date,
                time(o.created_at) as order_time,
                o.target_date,
                o.quantity,
                CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
              AND u.is_deleted = FALSE
            ORDER BY o.target_date, u.full_name
        '''
        db.cursor.execute(query, (start_date.isoformat(), end_date.isoformat()))
        
        total_portions = 0
        orders_count = 0
        for row in db.cursor.fetchall():
            order_date = datetime.strptime(row[2], "%Y-%m-%d").strftime("%d.%m.%Y")
            target_date = datetime.strptime(row[4], "%Y-%m-%d").strftime("%d.%m.%Y")
            ws_detailed.append([
                row[0], row[1], order_date, row[3], target_date, row[5], row[6]
            ])
            total_portions += row[5]
            orders_count += 1

        # 2. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"
        ws_summary_users = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
        summary_headers = ["–§–ò–û", "–û–±—ä–µ–∫—Ç", "–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π"]
        ws_summary_users.append(summary_headers)
        ws_summary_users.auto_filter.ref = "A1:C1"
        
        db.cursor.execute('''
            SELECT 
                u.full_name,
                u.location,
                SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.full_name, u.location
            ORDER BY SUM(o.quantity) DESC
        ''', (start_date.isoformat(), end_date.isoformat()))
        
        for row in db.cursor.fetchall():
            ws_summary_users.append(row)

        # 3. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"
        ws_summary_locations = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
        loc_headers = ["–û–±—ä–µ–∫—Ç", "–ü–æ—Ä—Ü–∏–∏"]
        ws_summary_locations.append(loc_headers)
        ws_summary_locations.auto_filter.ref = "A1:B1"
        
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.location
            ORDER BY SUM(o.quantity) DESC
        ''', (start_date.isoformat(), end_date.isoformat()))
        
        for row in db.cursor.fetchall():
            ws_summary_locations.append(row)
        ws_summary_locations.append(["–í–°–ï–ì–û", total_portions])

        # 4. –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_stats = wb.create_sheet("–ò—Ç–æ–≥–∏")
        stats_headers = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
        ws_stats.append(stats_headers)
        
        db.cursor.execute('''
            SELECT COUNT(DISTINCT u.id)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
        ''', (start_date.isoformat(), end_date.isoformat()))
        unique_users = db.cursor.fetchone()[0]

        stats_data = [
            ["–ü–µ—Ä–∏–æ–¥", f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"],
            ["–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", orders_count],
            ["–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π", total_portions],
            ["–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", unique_users],
            ["–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", now.strftime("%d.%m.%Y %H:%M")]
        ]
        for row in stats_data:
            ws_stats.append(row)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"accounting_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        caption = (
            f"üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –æ—Ç—á–µ—Ç\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}\n"
            f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total_portions}\n"
            f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {unique_users}"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption,
                filename=file_name
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö."
        )
        raise

async def export_monthly_report(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç"""
    try:
        if update.effective_user.id not in CONFIG['admin_ids']:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        now = datetime.now(TIMEZONE)
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        if not start_date or not end_date:
            month_start = now.replace(day=1).date()
            end_date = now.date()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ start_date <= end_date
            if start_date > end_date:
                start_date, end_date = end_date, start_date

        reports_dir = ensure_reports_dir('admin')
        now = datetime.now(TIMEZONE)
        month_start = now.replace(day=1).date()
        
        wb = Workbook()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'Sheet' in wb.sheetnames:
            del wb['Sheet']
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
        for location in LOCATIONS:
            ws = wb.create_sheet(location)
            headers = ["–î–∞—Ç–∞ –æ–±–µ–¥–∞", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", "–ü–æ–¥–ø–∏—Å—å", "–ö–æ–ª-–≤–æ –æ–±–µ–¥–æ–≤", "–¢–∏–ø –∑–∞–∫–∞–∑–∞"]
            ws.append(headers)
            ws.auto_filter.ref = f"A1:F1"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
            db.cursor.execute('''
                SELECT 
                    o.target_date,
                    u.full_name,
                    u.location,
                    o.quantity,
                    CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
                FROM orders o
                JOIN users u ON o.user_id = u.id
                WHERE o.target_date BETWEEN ? AND date('now')
                  AND u.location = ?
                  AND o.is_cancelled = FALSE
                  AND u.is_deleted = FALSE
                ORDER BY o.target_date, u.full_name
            ''', (month_start.isoformat(), location))
            
            for row in db.cursor.fetchall():
                target_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
                ws.append([target_date, row[1], row[2], "", row[3], row[4]])  # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        
        # –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_summary = wb.create_sheet("–ò—Ç–æ–≥–∏")
        summary_headers = ["–õ–æ–∫–∞—Ü–∏—è", "–ü–æ—Ä—Ü–∏–∏"]
        ws_summary.append(summary_headers)
        ws_summary.auto_filter.ref = "A1:B1"
        
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND date('now')
              AND o.is_cancelled = FALSE
            GROUP BY u.location
            ORDER BY SUM(o.quantity) DESC
        ''', (month_start.isoformat(),))
        
        total = 0
        for location, portions in db.cursor.fetchall():
            ws_summary.append([location, portions])
            total += portions
        
        ws_summary.append(["–í–°–ï–ì–û", total])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∂–∏—Ä–Ω—ã–º
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = now.strftime("%Y%m%d_%H%M%S")
        file_name = f"admin_report_{timestamp}.xlsx"
        file_path = os.path.join(reports_dir, file_name)
        wb.save(file_path)
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=f"üìÖ –ê–¥–º–∏–Ω –æ—Ç—á–µ—Ç –∑–∞ {month_start.strftime('%B %Y')}\n"
                       f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}",
                filename=file_name
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (message_history, handle_export_orders_for_month) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def message_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    user = update.effective_user
    if user.id not in CONFIG.get('admin_ids', []):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return ADMIN_MESSAGE

    try:
        db.cursor.execute("""
            SELECT m.sent_at, u1.full_name AS admin, u2.full_name AS user, m.message_text
            FROM admin_messages m
            JOIN users u1 ON m.admin_id = u1.telegram_id
            LEFT JOIN users u2 ON m.user_id = u2.telegram_id
            ORDER BY m.sent_at DESC LIMIT 20
        """)
        messages = db.cursor.fetchall()

        if not messages:
            await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return ADMIN_MESSAGE

        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        for msg in messages:
            sent_at, admin, user_name, message, *rest = msg
            user_part = f"üë§ {user_name}" if user_name else "üë• –í—Å–µ–º"
            response += f"üïí {sent_at}\nüßë‚Äçüíº –ê–¥–º–∏–Ω: {admin}\n{user_part}\nüìù –¢–µ–∫—Å—Ç: {message}\n\n"

        await update.message.reply_text(response[:4096])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
    return ADMIN_MESSAGE

async def handle_export_orders_for_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü'"""
    if update.effective_user.id not in CONFIG['provider_ids']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return MAIN_MENU

    keyboard = [["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"], ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:", reply_markup=reply_markup)
    return SELECT_MONTH_RANGE