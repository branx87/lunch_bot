# ##admin.py
import openpyxl
from datetime import datetime, date, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext
from telegram.ext import ContextTypes
import logging

from config import CONFIG
from constants import ADMIN_MESSAGE, MAIN_MENU, SELECT_MONTH_RANGE
from db import db
from keyboards import create_admin_keyboard
try:
    from openpyxl.styles import Font
except RuntimeError:  # –î–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏–π –±–µ–∑ GUI
    class Font:
        def __init__(self, bold=False):
            self.bold = bold
import sqlite3
from typing import Optional, Union, List, Dict, Any, Tuple, Callable
import os
from openpyxl import Workbook
from openpyxl.styles import Font

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

def ensure_reports_dir(report_type: str = 'accounting') -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –Ω–µ–π"""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    if report_type == 'provider':
        reports_dir = os.path.join(base_dir, 'reports', 'provider_reports')
    elif report_type == 'admin':
        reports_dir = os.path.join(base_dir, 'reports', 'admin_reports')
    else:
        reports_dir = os.path.join(base_dir, 'reports', 'accounting_reports')
    
    os.makedirs(reports_dir, exist_ok=True)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    report_files = sorted(
        [f for f in os.listdir(reports_dir) if f.endswith('.xlsx')],
        key=lambda x: os.path.getmtime(os.path.join(reports_dir, x)),
        reverse=True
    )
    for old_file in report_files[5:]:
        try:
            os.remove(os.path.join(reports_dir, old_file))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞ {old_file}: {e}")
    
    return reports_dir

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (message_history, handle_export_orders_for_month) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def message_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    user = update.effective_user
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {user.id}")

    if user.id not in CONFIG.get('admin_ids', []):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            reply_markup=create_admin_keyboard()
        )
        return ADMIN_MESSAGE

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        db.cursor.execute("""
            SELECT 
                m.sent_at, 
                a.full_name AS admin_name,
                u.full_name AS user_name,
                m.message_text,
                CASE WHEN m.admin_id IS NOT NULL THEN 'admin_to_user' ELSE 'user_to_admin' END AS direction
            FROM admin_messages m
            LEFT JOIN users a ON m.admin_id = a.telegram_id
            LEFT JOIN users u ON m.user_id = u.telegram_id
            ORDER BY m.sent_at DESC 
            LIMIT 20
        """)
        messages = db.cursor.fetchall()

        if not messages:
            await update.message.reply_text(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞",
                reply_markup=create_admin_keyboard()
            )
            return ADMIN_MESSAGE

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≤ Telegram)
        responses = ["üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"]
        current_length = len(responses[0])
        
        for msg in messages:
            sent_at, admin_name, user_name, message_text, direction = msg
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction == 'admin_to_user':
                msg_text = (
                    f"‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_at}\n"
                    f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {admin_name or '–°–∏—Å—Ç–µ–º–∞'}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
                )
            else:
                msg_text = (
                    f"‚¨ÜÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {sent_at}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
                )
            
            msg_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –ª–∏ –ª–∏–º–∏—Ç
            if current_length + len(msg_text) > 4000:
                responses.append(msg_text)
                current_length = len(msg_text)
            else:
                responses[-1] += msg_text
                current_length += len(msg_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        for response in responses:
            await update.message.reply_text(
                response,
                reply_markup=create_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π",
            reply_markup=create_admin_keyboard()
        )
    
    return ADMIN_MESSAGE

async def handle_export_orders_for_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü'"""
    if update.effective_user.id not in CONFIG['provider_ids']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return MAIN_MENU

    keyboard = [["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"], ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:", reply_markup=reply_markup)
    return SELECT_MONTH_RANGE
    
def _check_access(user_id: int, report_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç—É"""
    if report_type == 'admin' and user_id in CONFIG['admin_ids']:
        return True
    if report_type == 'provider' and user_id in CONFIG['provider_ids']:
        return True
    if report_type == 'accounting' and user_id in CONFIG['accounting_ids']:
        return True
    return False