import openpyxl
from datetime import datetime, date, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from config import CONFIG, TIMEZONE
from db import db
import logging
from keyboards import create_main_menu_keyboard
from openpyxl.styles import Font
import sqlite3
from handlers.states import MAIN_MENU
from handlers.report_handlers import SELECT_MONTH_RANGE
from handlers.common import show_main_menu
from typing import Optional, Union, List, Dict, Any, Tuple, Callable
import os
from openpyxl import Workbook
from openpyxl.styles import Font
import logging

import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log'
)
logger = logging.getLogger(__name__)

async def export_orders_for_provider(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç Excel-—Ñ–∞–π–ª —Å –æ—Ç—á—ë—Ç–æ–º –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –¥–Ω—è–º –∏ –æ–±—ä–µ–∫—Ç–∞–º.
    –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    """

    try:
        user = update.effective_user

        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é
        if not start_date or not end_date:
            today = datetime.now(TIMEZONE).date()
            start_date = end_date = today
        else:
            start_date = start_date if isinstance(start_date, date) else start_date.date()
            end_date = end_date if isinstance(end_date, date) else end_date.date()

        wb = openpyxl.Workbook()

        # 1. –õ–∏—Å—Ç "–ó–∞–∫–∞–∑—ã"
        ws_orders = wb.active
        ws_orders.title = "–ó–∞–∫–∞–∑—ã"
        orders_headers = ["–î–∞—Ç–∞", "–õ–æ–∫–∞—Ü–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π"]
        ws_orders.append(orders_headers)
        ws_orders.auto_filter.ref = "A1:C1"

        total_portions = 0

        # SQL-–∑–∞–ø—Ä–æ—Å: –∑–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º –∏ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT 
                o.target_date,
                u.location,
                SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY o.target_date, u.location
            ORDER BY o.target_date, u.location
        ''', (start_date.isoformat(), end_date.isoformat()))

        for row in db.cursor.fetchall():
            formatted_date = datetime.strptime(row[0], "%Y-%m-%d").strftime("%d.%m.%Y")
            ws_orders.append([formatted_date, row[1], row[2]])
            total_portions += row[2]

        # 2. –õ–∏—Å—Ç "–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"
        valid_locations = {"–û—Ñ–∏—Å", "–ü–¶ 1", "–ü–¶ 2", "–°–∫–ª–∞–¥"}
        ws_summary = wb.create_sheet("–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
        summary_headers = ["–û–±—ä–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π"]
        ws_summary.append(summary_headers)
        ws_summary.auto_filter.ref = "A1:B1"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
            GROUP BY u.location
        ''', (start_date.isoformat(), end_date.isoformat()))

        location_data = dict(db.cursor.fetchall())

        for loc in sorted(valid_locations):
            portions = location_data.get(loc, 0)
            ws_summary.append([loc, portions])

        # 3. –õ–∏—Å—Ç "–ò—Ç–æ–≥–∏"
        ws_stats = wb.create_sheet("–ò—Ç–æ–≥–∏")
        stats_headers = ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
        ws_stats.append(stats_headers)

        # –ü–æ–¥—Å—á—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
        db.cursor.execute('''
            SELECT DISTINCT u.location
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
              AND o.is_cancelled = FALSE
        ''', (start_date.isoformat(), end_date.isoformat()))
        unique_locations = [row[0] for row in db.cursor.fetchall() if row[0] in valid_locations]
        locations_count = len(unique_locations)

        stats_data = [
            ["–ü–µ—Ä–∏–æ–¥", f"{start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}"],
            ["–í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π", total_portions],
            ["–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π", locations_count],
            ["–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")]
        ]
        for row in stats_data:
            ws_stats.append(row)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bold_font = Font(bold=True)
        for sheet in wb.worksheets:
            for row in sheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = bold_font
            for column in sheet.columns:
                max_length = max((len(str(cell.value)) if cell.value else 0 for cell in column), default=0)
                adjusted_width = (max_length + 2) * 1.2
                sheet.column_dimensions[column[0].column_letter].width = adjusted_width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = f"provider_report_{start_date.strftime('%Y%m%d')}"
        if start_date != end_date:
            file_path += f"_to_{end_date.strftime('%Y%m%d')}"
        file_path += ".xlsx"
        wb.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        caption = (
            f"üçΩ –ó–∞–∫–∞–∑—ã –Ω–∞ {start_date.strftime('%d.%m.%Y')}"
            f"{f' ‚Äî {end_date.strftime('%d.%m.%Y')}' if start_date != end_date else ''}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏–π: {locations_count} | üçõ –í—Å–µ–≥–æ: {total_portions} –ø–æ—Ä—Ü–∏–π\n"
            "üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"
        )

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=caption
            )

        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")
        raise

async def export_accounting_report(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 start_date=None, end_date=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏"""
    try:
        now = datetime.now(TIMEZONE)
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        if not start_date or not end_date:
            start_date = now.date()
            end_date = now.date()

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞–∫–∞–∑—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "–§–ò–û", "–û–±—ä–µ–∫—Ç", 
            "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞",  # –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑
            "–î–∞—Ç–∞ –æ–±–µ–¥–∞",                   # –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∑–∞–∫–∞–∑
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¢–∏–ø –∑–∞–∫–∞–∑–∞", 
            "–°—Ç–∞—Ç—É—Å"
        ]
        ws.append(headers)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        db.cursor.execute('''
            SELECT 
                u.full_name,
                u.location,
                date(o.created_at) as target_date,
                time(o.created_at) as order_time,
                o.target_date,
                o.quantity,
                CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END,
                CASE WHEN o.is_cancelled THEN '–û—Ç–º–µ–Ω—ë–Ω' ELSE '–ê–∫—Ç–∏–≤–µ–Ω' END
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE date(o.created_at) BETWEEN ? AND ?
            ORDER BY o.target_date, u.full_name
        ''', (start_date.isoformat(), end_date.isoformat()))

        for row in db.cursor.fetchall():
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞
            formatted_row = list(row)
            formatted_row[2] = datetime.strptime(row[2], "%Y-%m-%d").strftime("%d.%m.%Y")  # –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
            formatted_row[4] = datetime.strptime(row[4], "%Y-%m-%d").strftime("%d.%m.%Y")  # –î–∞—Ç–∞ –æ–±–µ–¥–∞
            ws.append(formatted_row)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_path = f"report_{now.strftime('%Y%m%d_%H%M')}.xlsx"
        wb.save(file_path)
        
        with open(file_path, 'rb') as file:
            await update.message.reply_document(
                document=file,
                caption=f"–û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def export_orders_for_month(
    update: Update = None, 
    context: ContextTypes.DEFAULT_TYPE = None,
    start_date: date = None,
    end_date: date = None,
    month_offset: int = 0,
    send_to_providers: bool = False
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü/–ø–µ—Ä–∏–æ–¥
    :param update: –û–±—ä–µ–∫—Ç Update (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None - –±—É–¥–µ—Ç –º–µ—Å—è—Ü)
    :param end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ None - –±—É–¥–µ—Ç –º–µ—Å—è—Ü)
    :param month_offset: –°–º–µ—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ (0 - —Ç–µ–∫—É—â–∏–π, -1 - –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
    :param send_to_providers: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –æ—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    :return: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        now = datetime.now(TIMEZONE)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        if start_date is None or end_date is None:
            if month_offset == -1:  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                first_day = now.replace(day=1)
                start_date = (first_day - timedelta(days=1)).replace(day=1)
                end_date = first_day - timedelta(days=1)
            else:  # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                start_date = now.replace(day=1)
                end_date = now
        
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞–∫–∞–∑—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–û–±—ä–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π"]
        ws.append(headers)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity) AS portions
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND ?
            GROUP BY u.location
            ORDER BY portions DESC
        ''', (start_date.isoformat(), end_date.isoformat()))
        
        total = 0
        for location, portions in db.cursor.fetchall():
            ws.append([location, portions])
            total += portions
        
        ws.append(["–ò–¢–û–ì–û", total])
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_len = max(len(str(cell.value)) for cell in col)
            ws.column_dimensions[col[0].column_letter].width = (max_len + 2) * 1.2
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if month_offset != 0:
            file_path = f"orders_report_{start_date.strftime('%Y-%m')}.xlsx"
        else:
            file_path = f"orders_report_{start_date.strftime('%Y-%m-%d')}_to_{end_date.strftime('%Y-%m-%d')}.xlsx"
        wb.save(file_path)
        
        # –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        if update and context:
            if send_to_providers:
                success = 0
                with open(file_path, 'rb') as file:
                    for provider_id in CONFIG['provider_ids']:
                        try:
                            await context.bot.send_document(
                                chat_id=provider_id,
                                document=file,
                                caption=(
                                    f"üçΩ –ó–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                                    f"üìç –õ–æ–∫–∞—Ü–∏–∏ | üçõ –í—Å–µ–≥–æ: {total} –ø–æ—Ä—Ü–∏–π"
                                )
                            )
                            success += 1
                            file.seek(0)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É {provider_id}: {e}")
                
                await update.message.reply_text(
                    f"‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤\n"
                    f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                    f"‚Ä¢ –ü–æ—Ä—Ü–∏–π: {total}\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(CONFIG['provider_ids'])}"
                )
            else:
                with open(file_path, 'rb') as file:
                    await update.message.reply_document(
                        document=file,
                        caption=f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
                    )
            
            return await show_main_menu(update, update.effective_user.id)
        
        return file_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        if update:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
            return await show_main_menu(update, update.effective_user.id)
        raise

async def export_monthly_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id not in CONFIG['admin_ids']:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        wb = openpyxl.Workbook()
        
        ws_detailed = wb.active
        ws_detailed.title = "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"
        ws_detailed.append(["–§–ò–û", "–õ–æ–∫–∞—Ü–∏—è", "–î–∞—Ç–∞", "–ü–æ—Ä—Ü–∏–∏", "–¢–∏–ø"])
        
        ws_summary = wb.create_sheet("–ò—Ç–æ–≥–∏")
        ws_summary.append(["–õ–æ–∫–∞—Ü–∏—è", "–ü–æ—Ä—Ü–∏–∏"])
        
        month_start = datetime.now(TIMEZONE).replace(day=1).date()
        
        db.cursor.execute('''
            SELECT u.full_name, u.location, o.target_date, o.quantity, 
                   CASE WHEN o.is_preliminary THEN '–ü—Ä–µ–¥–∑–∞–∫–∞–∑' ELSE '–û–±—ã—á–Ω—ã–π' END
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND date('now')
            ORDER BY o.target_date, u.location
        ''', (month_start.isoformat(),))
        
        for row in db.cursor.fetchall():
            ws_detailed.append(row)
        
        db.cursor.execute('''
            SELECT u.location, SUM(o.quantity)
            FROM orders o
            JOIN users u ON o.user_id = u.id
            WHERE o.target_date BETWEEN ? AND date('now')
            GROUP BY u.location
        ''', (month_start.isoformat(),))
        
        total = 0
        for location, portions in db.cursor.fetchall():
            ws_summary.append([location, portions])
            total += portions
        
        ws_summary.append(["–í–°–ï–ì–û", total])
        
        for sheet in wb.worksheets:
            for col in sheet.columns:
                sheet.column_dimensions[col[0].column_letter].width = max(
                    len(str(cell.value)) * 1.2 for cell in col
                )

        file_path = f"monthly_report_{datetime.now(TIMEZONE).strftime('%Y-%m')}.xlsx"
        wb.save(file_path)
        
        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=file,
                caption=f"üìÖ –û—Ç—á—ë—Ç –∑–∞ {month_start.strftime('%B %Y')}\n"
                       f"üçΩ –í—Å–µ–≥–æ –ø–æ—Ä—Ü–∏–π: {total}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")

async def message_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º"""
    user = update.effective_user
    if user.id not in CONFIG.get('admin_ids', []):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return ADMIN_MESSAGE

    try:
        db.cursor.execute("""
            SELECT m.sent_at, u1.full_name AS admin, u2.full_name AS user, m.message_text
            FROM admin_messages m
            JOIN users u1 ON m.admin_id = u1.telegram_id
            LEFT JOIN users u2 ON m.user_id = u2.telegram_id
            ORDER BY m.sent_at DESC LIMIT 20
        """)
        messages = db.cursor.fetchall()

        if not messages:
            await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return ADMIN_MESSAGE

        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        for msg in messages:
            sent_at, admin, user_name, message, *rest = msg
            user_part = f"üë§ {user_name}" if user_name else "üë• –í—Å–µ–º"
            response += f"üïí {sent_at}\nüßë‚Äçüíº –ê–¥–º–∏–Ω: {admin}\n{user_part}\nüìù –¢–µ–∫—Å—Ç: {message}\n\n"

        await update.message.reply_text(response[:4096])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
    return ADMIN_MESSAGE

async def handle_export_orders_for_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü'"""
    if update.effective_user.id not in CONFIG['provider_ids']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return MAIN_MENU

    keyboard = [["–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"], ["–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"], ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:", reply_markup=reply_markup)
    return SELECT_MONTH_RANGE
